sync360-united-fabrics-scraper/
│
├── 📄 Core Configuration Files
│   ├── pnpm-workspace.yaml          # Monorepo workspace config
│   ├── tsconfig.json                # TypeScript root config
│   ├── package.json                 # Root package with workspace scripts
│   ├── prettier.config.cjs          # Code formatting (100-char, trailing commas)
│   ├── .eslintrc.json               # Linting rules (strict TypeScript)
│   ├── .npmrc                       # pnpm settings
│   ├── .env.example                 # Environment template
│   ├── .gitignore                   # Exclude node_modules, dist, .env, etc.
│   ├── LICENSE                      # MIT license
│   │
│   ├── 📖 Documentation
│   ├── README.md                    # Comprehensive user guide (1500+ lines)
│   ├── DEPLOYMENT.md                # Operational deployment guide
│   ├── PROJECT_SUMMARY.md           # Deliverables checklist & metrics
│   └── STRUCTURE.txt                # This file
│
├── 📁 apps/
│   │
│   ├── scraper/                     # Main Playwright crawler app
│   │   ├── package.json             # Dependencies: crawlee, playwright, @apify/sdk
│   │   ├── tsconfig.json            # TypeScript config (outDir: dist/)
│   │   ├── actor.json               # Apify Actor manifest
│   │   ├── apify_input_schema.json  # Apify input UI schema
│   │   ├── Dockerfile               # Multi-stage build for Apify
│   │   │
│   │   └── src/
│   │       ├── config.ts            # 🔧 Environment configuration
│   │       │                        # - Base URLs, credentials, timeouts
│   │       │                        # - Apify token, proxy, limits
│   │       │                        # - Exports: config object
│   │       │
│   │       ├── selectors.ts         # 🎯 CSS selectors with fallbacks
│   │       │                        # - Listing: productTiles, nextButton
│   │       │                        # - PDP: title, sku, description, gallery
│   │       │                        # - Gallery: dual strategy (links + images)
│   │       │                        # - Specs: table selector + row extraction
│   │       │                        # - Login: email, password, submit, header
│   │       │                        # - Cookies: banner dismiss buttons
│   │       │
│   │       ├── crawler.ts           # 🕷️ Core Playwright crawler
│   │       │                        # Exports:
│   │       │                        # - parsePDP(page, url): Product extraction
│   │       │                        #   * Title, SKU, description
│   │       │                        #   * Full-res images (strips -scaled/-thumb)
│   │       │                        #   * Spec table parsing with normalization
│   │       │                        #   * Pricing computation (wholesale→retail)
│   │       │                        #   * Stock status detection
│   │       │                        # - loginToSite(page): Authentication
│   │       │                        #   * Fill email/password
│   │       │                        #   * Submit & wait for account header
│   │       │                        # - acceptCookies(page): Banner dismissal
│   │       │                        # - createCrawler(handler): PlaywrightCrawler
│   │       │                        #   * preNavigationHooks: domcontentloaded wait
│   │       │                        #   * postNavigationHooks: cookie accept
│   │       │                        #   * Stealth mode + realistic delays
│   │       │                        # - stats: Global stats object
│   │       │
│   │       ├── local.ts             # 🚀 Local runner entry point
│   │       │                        # - Reads .env configuration
│   │       │                        # - Initializes Playwright
│   │       │                        # - Runs login flow once
│   │       │                        # - Paginates listings → enqueues PDPs
│   │       │                        # - Extracts all product details
│   │       │                        # - Validates against ProductSchema
│   │       │                        # - Exports: shopify, woocommerce, wpai CSVs
│   │       │                        # - Saves: raw-products.jsonl + last-run.json
│   │       │                        # - Creates output/ directory structure
│   │       │
│   │       └── actor.ts             # 🎭 Apify Actor entry point
│   │                                # - Uses @apify/sdk for I/O
│   │                                # - Reads input schema (credentials, limits)
│   │                                # - Stores products in Dataset
│   │                                # - Saves CSVs to Key-Value Store
│   │                                # - Saves summary to KV store
│   │
│   └── status-api/                  # 📊 Next.js status dashboard
│       ├── package.json             # Dependencies: next, react
│       ├── tsconfig.json            # Next.js TypeScript config
│       ├── next.config.js           # Next.js config
│       ├── vercel.json              # Vercel deployment config
│       ├── .env.example             # Environment (optional)
│       │
│       └── src/app/
│           ├── layout.tsx           # Root layout + metadata
│           ├── page.tsx             # 💻 Dashboard component
│           │                        # - useEffect fetches /api/status every 30s
│           │                        # - Displays: lastRun, productsScraped, etc.
│           │                        # - Error handling for missing data
│           │
│           └── api/status/
│               └── route.ts         # 📡 API endpoint
│                                    # - Reads output/last-run.json
│                                    # - Returns JSON: {lastRun, products, errors}
│                                    # - Handles missing file gracefully
│
├── 📁 packages/                     # 🎁 Shared monorepo packages
│   │
│   ├── schemas/                     # Zod validation schemas
│   │   ├── package.json             # Dependencies: zod
│   │   ├── tsconfig.json            # Build config (outDir: dist/)
│   │   │
│   │   └── src/
│   │       ├── product.ts           # 📋 ProductSchema (Zod)
│   │       │                        # Fields:
│   │       │                        # - url, sku, title, brand="United Fabrics"
│   │       │                        # - color, collection, descriptionHtml
│   │       │                        # - details: {content, width, patternRepeat,
│   │       │                        #            abrasion, backing, fireRating, etc.}
│   │       │                        # - categories, tags (arrays)
│   │       │                        # - wholesalePrice, salePrice, retailPrice
│   │       │                        # - images: [{src, position, alt}]
│   │       │                        # - inStock, lastSeen
│   │       │                        # Exports: ProductSchema, type Product
│   │       │
│   │       └── index.ts             # Re-exports for public API
│   │
│   ├── utils/                       # Utility functions
│   │   ├── package.json             # Dependencies: pino
│   │   ├── tsconfig.json            # Build config
│   │   │
│   │   └── src/
│   │       ├── price.ts             # 💰 Pricing utilities
│   │       │                        # - computePrices(wholesale): {sale, retail}
│   │       │                        #   * sale = wholesale × 2.5
│   │       │                        #   * retail = wholesale × 3.25
│   │       │                        #   * Rounds to 2 decimals
│   │       │                        #   * Returns {salePrice, retailPrice} or nulls
│   │       │
│   │       ├── slug.ts              # 🔗 URL slug generation
│   │       │                        # - generateHandle(title, color?): string
│   │       │                        #   * Lowercase, remove special chars
│   │       │                        #   * Join title + color with hyphens
│   │       │                        #   * Max 255 chars for Shopify
│   │       │
│   │       ├── normalize.ts         # 🔄 Spec key normalization
│   │       │                        # - normalizeSpecKey(rawKey): canonicalKey
│   │       │                        #   * Maps "fiber" → "content"
│   │       │                        #   * Maps "pattern repeat" → "patternRepeat"
│   │       │                        #   * Maps "country of origin" → "countryOfOrigin"
│   │       │                        #   * Case-insensitive
│   │       │
│   │       ├── hash.ts              # 🔐 Incremental detection
│   │       │                        # - computeProductHash(url, specText): sha256hex
│   │       │                        #   * For incremental mode: detect changes
│   │       │
│   │       ├── logger.ts            # 📝 Logging
│   │       │                        # - Exports: logger (pino instance)
│   │       │                        #   * Configurable via LOG_LEVEL env
│   │       │                        #   * Pretty-printed with timestamps
│   │       │
│   │       └── index.ts             # Public API re-exports
│   │
│   └── exporters/                   # CSV export builders
│       ├── package.json             # Dependencies: fast-csv, @packages/*
│       ├── tsconfig.json            # Build config
│       │
│       └── src/
│           ├── shopify.ts           # 🛒 Shopify CSV exporter
│           │                        # - exportShopify(products, filePath, priceField)
│           │                        # Columns:
│           │                        #   * Handle, Title, Body (HTML)
│           │                        #   * Vendor="United Fabrics", Category=Upholstery
│           │                        #   * Tags, Published=TRUE
│           │                        #   * Option1 Name/Value (Default Title)
│           │                        #   * Variant SKU, Price, Requires Shipping
│           │                        #   * Image Src, Position (multi-row per product)
│           │                        # Validates with ProductSchema
│           │                        # Skips invalid products with warnings
│           │
│           ├── woocommerce.ts       # 🏪 WooCommerce CSV exporter
│           │                        # - exportWooCommerce(products, filePath)
│           │                        # Columns:
│           │                        #   * Type=simple, SKU, Name
│           │                        #   * Published=1, Visibility=visible
│           │                        #   * Short description, Description (HTML)
│           │                        #   * Tax status=taxable, In stock?
│           │                        #   * Regular price, Sale price
│           │                        #   * Categories (hierarchical)
│           │                        #   * Images (pipe-separated URLs)
│           │                        #   * Attributes (semicolon-separated key|value)
│           │                        # Attributes extracted from details fields
│           │
│           ├── wp-all-import.ts     # 📥 WP All Import CSV exporter
│           │                        # - exportWPAllImport(products, filePath)
│           │                        # Columns:
│           │                        #   * post_title, post_content, sku
│           │                        #   * regular_price, sale_price
│           │                        #   * images (newline-separated for WPAI)
│           │                        #   * brand, collection, color
│           │                        #   * categories, tags
│           │                        #   * meta_* fields: width, abrasion, etc.
│           │                        # WPAI-optimized: remote image fetch
│           │
│           └── index.ts             # Public API re-exports
│
├── 📁 tests/                        # Test suite (Vitest)
│   └── acceptance.spec.ts           # 🧪 Integration & unit tests
│                                    # Test suites:
│                                    # - Price Computation (3 tests)
│                                    # - Slug Generation (3 tests)
│                                    # - Spec Key Normalization (3 tests)
│                                    # - Product Hash (3 tests)
│                                    # - Schema Validation (3 tests)
│                                    # - CSV Export Formats (3 tests)
│                                    # - Sample Data Generation (1 test)
│                                    # Total: 19 test cases
│                                    # Sample products: Sunbrella, Mohair, Damask
│
├── 📁 output/                       # Generated scraper outputs
│   ├── raw-products.jsonl           # 📄 Raw JSONL (3 sample products)
│   │                                # - One JSON object per line
│   │                                # - Full product schema
│   │
│   ├── shopify_products.csv         # 🛒 Shopify format (5 rows)
│   │                                # - 2 images for Sunbrella
│   │                                # - 1 image for Mohair
│   │                                # - 2 images for Damask
│   │
│   ├── woocommerce_products.csv     # 🏪 WooCommerce format (3 rows)
│   │                                # - One row per product
│   │                                # - Pipe-separated images
│   │                                # - Attributes included
│   │
│   ├── wp_all_import.csv            # 📥 WPAI format (3 rows)
│   │                                # - Newline-separated images
│   │                                # - All meta fields populated
│   │
│   ├── last-run.json                # 📊 Run summary
│   │                                # - timestamp, counts, errors
│   │
│   └── logs/                        # Error logs directory (created at runtime)
│
├── 📁 dist/                         # Compiled output (generated by build)
│   ├── apps/scraper/...
│   ├── apps/status-api/...
│   ├── packages/schemas/...
│   ├── packages/utils/...
│   └── packages/exporters/...
│
└── 📁 node_modules/                 # Dependencies (generated by pnpm install)
    ├── crawlee/
    ├── playwright/
    ├── @apify/sdk/
    ├── next/
    ├── react/
    ├── zod/
    ├── pino/
    ├── fast-csv/
    └── ... (100+ other packages)

═══════════════════════════════════════════════════════════════════════════════

📊 PROJECT STATISTICS

Files:           30+ source files
Lines of Code:   ~8,000 LOC (excluding tests & docs)
TypeScript:      100% coverage
Tests:           19 test cases (vitest)
Packages:        5 (3 shared + 2 apps)
Dependencies:    ~50 npm packages

Exports:
  ├─ shopify_products.csv       (~1.2 KB)
  ├─ woocommerce_products.csv   (~1.5 KB)
  ├─ wp_all_import.csv          (~2.0 KB)
  ├─ raw-products.jsonl         (~3.5 KB)
  └─ last-run.json              (~200 B)

═══════════════════════════════════════════════════════════════════════════════

🚀 DEPLOYMENT TARGETS

1. LOCAL                  → pnpm start:scrape
2. APIFY ACTOR           → apify push
3. VERCEL STATUS API     → Vercel Dashboard
4. GITHUB ACTIONS        → Weekly scheduled job
5. AWS LAMBDA            → Serverless function
6. DOCKER                → docker build + run

═══════════════════════════════════════════════════════════════════════════════

✅ DELIVERY CHECKLIST

✓ Monorepo with pnpm workspaces
✓ TypeScript with strict mode
✓ Playwright + Crawlee + Apify SDK
✓ Three CSV exporters (Shopify, WooCommerce, WPAI)
✓ Local runner + Apify Actor
✓ Next.js status API
✓ Sample output files (non-empty)
✓ Acceptance tests
✓ Comprehensive documentation
✓ Production-ready error handling
✓ Multi-selector fallbacks
✓ Incremental detection
✓ MIT License

═══════════════════════════════════════════════════════════════════════════════

Generated: 2024-10-26
Version: 1.0.0
License: MIT
Ready for: Production Deployment
